let peg = String.raw`

{
  var implicitLineJoiningLevel = 0;
  var INDENT_STEP = 2;

  var indentLevel = 0;
}  

string1
  = '"' chars:([^\n\r\f\\"] / "\\" nl:nl { return ""; } / escape)* '"' {
      return chars.join("");
    }

string2
  = "'" chars:([^\n\r\f\\'] / "\\" nl:nl { return ""; } / escape)* "'" {
      return chars.join("");
    }


// funcdef
//   = decorators? 'def' Name parameters COLON suite
  

Name
  = ([a-z]i / '_') [a-z0-9_]i*
  
Lparen= '(' {implicitLineJoiningLevel++;}
Rparen= ')' {implicitLineJoiningLevel--;}


parameters = Lparen /*(varargslist)?*/ Rparen
  
BlockDocumentation
  = "'''" [a-z]i* Doc+ [a-z]i* "'''"

BlockComment
  = "'''" [a-z]i* "'''"
  
Doc
  = ":doc:"

Integer "integer"
  = [0-9]+ { return parseInt(text(), 10); }

_ "whitespace"
  = [ \t\n\r]*
  
escape
  = unicode
  / "\\" ch:[^\r\n\f0-9a-f]i { return ch; }
   
nl
  = "\n"
  / "\r\n"
  / "\r"
  / "\f"
 
hex
  = [0-9a-f]i
    
unicode
  = "\\" digits:$(hex hex? hex? hex? hex? hex?) ("\r\n" / [ \t\r\n\f])? {
      return String.fromCharCode(parseInt(digits, 16));
    }
`

function escapeBackslash(string) {
  console.log(string)

  let escapedStr = string.replace(/\\/g, "\\\\")

  console.log(escapedStr)

  return escapedStr
}

/* eslint no-unused-expressions: 0 */
import { expect } from 'chai'
import { spy } from 'sinon'
import { generate, parse } from 'pegjs'
// import parser from "parser"

// var Parser = require('./parser'); // parser generated by pegjs --trace
import Tracer from 'pegjs-backtrace'

let text = '2*(3/4)'
 // input text is required.


// import reducers from '../../../src/renderer/reducers/editor'

describe.only('Parser', () => {
  let parser

  before( () => {
    parser = generate(peg, {trace: true})
  })

  it("recognizes a string comment", () => {
    let tracer = new Tracer("'''asdf:doc:asfd'''")

    try {
      let parsed = parser.parse("'''asdf:doc:asfd'''", {tracer: tracer})
      expect(parsed).to.eql(["a", "b", "b", "a"])
    } catch(e) {
      console.log(tracer.getBacktraceString())
      throw e
    }

  })
})
