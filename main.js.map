{"version":3,"sources":["webpack:///main.js","webpack:///webpack/bootstrap 69b1d2df1da98a54a710","webpack:///./main.development.js","webpack:///external \"electron\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_electron","menu","template","mainWindow","app","on","process","platform","quit","BrowserWindow","show","width","height","loadURL","__dirname","webContents","focus","label","submenu","selector","type","accelerator","click","setFullScreen","isFullScreen","shell","openExternal","Menu","buildFromTemplate","setApplicationMenu","close","setMenu","require"],"mappings":"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","file":"./main.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _electron = __webpack_require__(1);\n\t\n\tvar menu = void 0;\n\tvar template = void 0;\n\tvar mainWindow = null;\n\t\n\tif (false) {\n\t  require('electron-debug')(); // eslint-disable-line global-require\n\t}\n\t\n\t_electron.app.on('window-all-closed', function () {\n\t  if (process.platform !== 'darwin') _electron.app.quit();\n\t});\n\t\n\t_electron.app.on('ready', function () {\n\t  mainWindow = new _electron.BrowserWindow({\n\t    show: false,\n\t    width: 1024,\n\t    height: 728\n\t  });\n\t\n\t  mainWindow.loadURL('file://' + __dirname + '/app/app.html');\n\t\n\t  mainWindow.webContents.on('did-finish-load', function () {\n\t    mainWindow.show();\n\t    mainWindow.focus();\n\t  });\n\t\n\t  mainWindow.on('closed', function () {\n\t    mainWindow = null;\n\t  });\n\t\n\t  if (false) {\n\t    mainWindow.openDevTools();\n\t  }\n\t\n\t  if (process.platform === 'darwin') {\n\t    template = [{\n\t      label: 'Electron',\n\t      submenu: [{\n\t        label: 'About ElectronReact',\n\t        selector: 'orderFrontStandardAboutPanel:'\n\t      }, {\n\t        type: 'separator'\n\t      }, {\n\t        label: 'Services',\n\t        submenu: []\n\t      }, {\n\t        type: 'separator'\n\t      }, {\n\t        label: 'Hide ElectronReact',\n\t        accelerator: 'Command+H',\n\t        selector: 'hide:'\n\t      }, {\n\t        label: 'Hide Others',\n\t        accelerator: 'Command+Shift+H',\n\t        selector: 'hideOtherApplications:'\n\t      }, {\n\t        label: 'Show All',\n\t        selector: 'unhideAllApplications:'\n\t      }, {\n\t        type: 'separator'\n\t      }, {\n\t        label: 'Quit',\n\t        accelerator: 'Command+Q',\n\t        click: function click() {\n\t          _electron.app.quit();\n\t        }\n\t      }]\n\t    }, {\n\t      label: 'Edit',\n\t      submenu: [{\n\t        label: 'Undo',\n\t        accelerator: 'Command+Z',\n\t        selector: 'undo:'\n\t      }, {\n\t        label: 'Redo',\n\t        accelerator: 'Shift+Command+Z',\n\t        selector: 'redo:'\n\t      }, {\n\t        type: 'separator'\n\t      }, {\n\t        label: 'Cut',\n\t        accelerator: 'Command+X',\n\t        selector: 'cut:'\n\t      }, {\n\t        label: 'Copy',\n\t        accelerator: 'Command+C',\n\t        selector: 'copy:'\n\t      }, {\n\t        label: 'Paste',\n\t        accelerator: 'Command+V',\n\t        selector: 'paste:'\n\t      }, {\n\t        label: 'Select All',\n\t        accelerator: 'Command+A',\n\t        selector: 'selectAll:'\n\t      }]\n\t    }, {\n\t      label: 'View',\n\t      submenu:  false ? [{\n\t        label: 'Reload',\n\t        accelerator: 'Command+R',\n\t        click: function click() {\n\t          mainWindow.webContents.reload();\n\t        }\n\t      }, {\n\t        label: 'Toggle Full Screen',\n\t        accelerator: 'Ctrl+Command+F',\n\t        click: function click() {\n\t          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n\t        }\n\t      }, {\n\t        label: 'Toggle Developer Tools',\n\t        accelerator: 'Alt+Command+I',\n\t        click: function click() {\n\t          mainWindow.toggleDevTools();\n\t        }\n\t      }] : [{\n\t        label: 'Toggle Full Screen',\n\t        accelerator: 'Ctrl+Command+F',\n\t        click: function click() {\n\t          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n\t        }\n\t      }]\n\t    }, {\n\t      label: 'Window',\n\t      submenu: [{\n\t        label: 'Minimize',\n\t        accelerator: 'Command+M',\n\t        selector: 'performMiniaturize:'\n\t      }, {\n\t        label: 'Close',\n\t        accelerator: 'Command+W',\n\t        selector: 'performClose:'\n\t      }, {\n\t        type: 'separator'\n\t      }, {\n\t        label: 'Bring All to Front',\n\t        selector: 'arrangeInFront:'\n\t      }]\n\t    }, {\n\t      label: 'Help',\n\t      submenu: [{\n\t        label: 'Learn More',\n\t        click: function click() {\n\t          _electron.shell.openExternal('http://electron.atom.io');\n\t        }\n\t      }, {\n\t        label: 'Documentation',\n\t        click: function click() {\n\t          _electron.shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme');\n\t        }\n\t      }, {\n\t        label: 'Community Discussions',\n\t        click: function click() {\n\t          _electron.shell.openExternal('https://discuss.atom.io/c/electron');\n\t        }\n\t      }, {\n\t        label: 'Search Issues',\n\t        click: function click() {\n\t          _electron.shell.openExternal('https://github.com/atom/electron/issues');\n\t        }\n\t      }]\n\t    }];\n\t\n\t    menu = _electron.Menu.buildFromTemplate(template);\n\t    _electron.Menu.setApplicationMenu(menu);\n\t  } else {\n\t    template = [{\n\t      label: '&File',\n\t      submenu: [{\n\t        label: '&Open',\n\t        accelerator: 'Ctrl+O'\n\t      }, {\n\t        label: '&Close',\n\t        accelerator: 'Ctrl+W',\n\t        click: function click() {\n\t          mainWindow.close();\n\t        }\n\t      }]\n\t    }, {\n\t      label: '&View',\n\t      submenu:  false ? [{\n\t        label: '&Reload',\n\t        accelerator: 'Ctrl+R',\n\t        click: function click() {\n\t          mainWindow.webContents.reload();\n\t        }\n\t      }, {\n\t        label: 'Toggle &Full Screen',\n\t        accelerator: 'F11',\n\t        click: function click() {\n\t          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n\t        }\n\t      }, {\n\t        label: 'Toggle &Developer Tools',\n\t        accelerator: 'Alt+Ctrl+I',\n\t        click: function click() {\n\t          mainWindow.toggleDevTools();\n\t        }\n\t      }] : [{\n\t        label: 'Toggle &Full Screen',\n\t        accelerator: 'F11',\n\t        click: function click() {\n\t          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n\t        }\n\t      }]\n\t    }, {\n\t      label: 'Help',\n\t      submenu: [{\n\t        label: 'Learn More',\n\t        click: function click() {\n\t          _electron.shell.openExternal('http://electron.atom.io');\n\t        }\n\t      }, {\n\t        label: 'Documentation',\n\t        click: function click() {\n\t          _electron.shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme');\n\t        }\n\t      }, {\n\t        label: 'Community Discussions',\n\t        click: function click() {\n\t          _electron.shell.openExternal('https://discuss.atom.io/c/electron');\n\t        }\n\t      }, {\n\t        label: 'Search Issues',\n\t        click: function click() {\n\t          _electron.shell.openExternal('https://github.com/atom/electron/issues');\n\t        }\n\t      }]\n\t    }];\n\t    menu = _electron.Menu.buildFromTemplate(template);\n\t    mainWindow.setMenu(menu);\n\t  }\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = require(\"electron\");\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** main.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 69b1d2df1da98a54a710\n **/","import { app, BrowserWindow, Menu, shell } from 'electron';\n\nlet menu;\nlet template;\nlet mainWindow = null;\n\n\nif (process.env.NODE_ENV === 'development') {\n  require('electron-debug')(); // eslint-disable-line global-require\n}\n\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') app.quit();\n});\n\n\napp.on('ready', () => {\n  mainWindow = new BrowserWindow({\n    show: false,\n    width: 1024,\n    height: 728\n  });\n\n  mainWindow.loadURL(`file://${__dirname}/app/app.html`);\n\n  mainWindow.webContents.on('did-finish-load', () => {\n    mainWindow.show();\n    mainWindow.focus();\n  });\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  if (process.env.NODE_ENV === 'development') {\n    mainWindow.openDevTools();\n  }\n\n  if (process.platform === 'darwin') {\n    template = [{\n      label: 'Electron',\n      submenu: [{\n        label: 'About ElectronReact',\n        selector: 'orderFrontStandardAboutPanel:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Services',\n        submenu: []\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Hide ElectronReact',\n        accelerator: 'Command+H',\n        selector: 'hide:'\n      }, {\n        label: 'Hide Others',\n        accelerator: 'Command+Shift+H',\n        selector: 'hideOtherApplications:'\n      }, {\n        label: 'Show All',\n        selector: 'unhideAllApplications:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Quit',\n        accelerator: 'Command+Q',\n        click() {\n          app.quit();\n        }\n      }]\n    }, {\n      label: 'Edit',\n      submenu: [{\n        label: 'Undo',\n        accelerator: 'Command+Z',\n        selector: 'undo:'\n      }, {\n        label: 'Redo',\n        accelerator: 'Shift+Command+Z',\n        selector: 'redo:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Cut',\n        accelerator: 'Command+X',\n        selector: 'cut:'\n      }, {\n        label: 'Copy',\n        accelerator: 'Command+C',\n        selector: 'copy:'\n      }, {\n        label: 'Paste',\n        accelerator: 'Command+V',\n        selector: 'paste:'\n      }, {\n        label: 'Select All',\n        accelerator: 'Command+A',\n        selector: 'selectAll:'\n      }]\n    }, {\n      label: 'View',\n      submenu: (process.env.NODE_ENV === 'development') ? [{\n        label: 'Reload',\n        accelerator: 'Command+R',\n        click() {\n          mainWindow.webContents.reload();\n        }\n      }, {\n        label: 'Toggle Full Screen',\n        accelerator: 'Ctrl+Command+F',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }, {\n        label: 'Toggle Developer Tools',\n        accelerator: 'Alt+Command+I',\n        click() {\n          mainWindow.toggleDevTools();\n        }\n      }] : [{\n        label: 'Toggle Full Screen',\n        accelerator: 'Ctrl+Command+F',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }]\n    }, {\n      label: 'Window',\n      submenu: [{\n        label: 'Minimize',\n        accelerator: 'Command+M',\n        selector: 'performMiniaturize:'\n      }, {\n        label: 'Close',\n        accelerator: 'Command+W',\n        selector: 'performClose:'\n      }, {\n        type: 'separator'\n      }, {\n        label: 'Bring All to Front',\n        selector: 'arrangeInFront:'\n      }]\n    }, {\n      label: 'Help',\n      submenu: [{\n        label: 'Learn More',\n        click() {\n          shell.openExternal('http://electron.atom.io');\n        }\n      }, {\n        label: 'Documentation',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme');\n        }\n      }, {\n        label: 'Community Discussions',\n        click() {\n          shell.openExternal('https://discuss.atom.io/c/electron');\n        }\n      }, {\n        label: 'Search Issues',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/issues');\n        }\n      }]\n    }];\n\n    menu = Menu.buildFromTemplate(template);\n    Menu.setApplicationMenu(menu);\n  } else {\n    template = [{\n      label: '&File',\n      submenu: [{\n        label: '&Open',\n        accelerator: 'Ctrl+O'\n      }, {\n        label: '&Close',\n        accelerator: 'Ctrl+W',\n        click() {\n          mainWindow.close();\n        }\n      }]\n    }, {\n      label: '&View',\n      submenu: (process.env.NODE_ENV === 'development') ? [{\n        label: '&Reload',\n        accelerator: 'Ctrl+R',\n        click() {\n          mainWindow.webContents.reload();\n        }\n      }, {\n        label: 'Toggle &Full Screen',\n        accelerator: 'F11',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }, {\n        label: 'Toggle &Developer Tools',\n        accelerator: 'Alt+Ctrl+I',\n        click() {\n          mainWindow.toggleDevTools();\n        }\n      }] : [{\n        label: 'Toggle &Full Screen',\n        accelerator: 'F11',\n        click() {\n          mainWindow.setFullScreen(!mainWindow.isFullScreen());\n        }\n      }]\n    }, {\n      label: 'Help',\n      submenu: [{\n        label: 'Learn More',\n        click() {\n          shell.openExternal('http://electron.atom.io');\n        }\n      }, {\n        label: 'Documentation',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/tree/master/docs#readme');\n        }\n      }, {\n        label: 'Community Discussions',\n        click() {\n          shell.openExternal('https://discuss.atom.io/c/electron');\n        }\n      }, {\n        label: 'Search Issues',\n        click() {\n          shell.openExternal('https://github.com/atom/electron/issues');\n        }\n      }]\n    }];\n    menu = Menu.buildFromTemplate(template);\n    mainWindow.setMenu(menu);\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./main.development.js\n **/","module.exports = require(\"electron\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"electron\"\n ** module id = 1\n ** module chunks = 0\n **/"],"sourceRoot":""}